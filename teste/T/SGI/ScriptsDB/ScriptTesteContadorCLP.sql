USE [SGI]
/*Resgistros para testes*/



delete from [dbo].[T_FEEDBACK_MOV_ESTOQUE]
delete from [dbo].[T_FEEDBACK]
delete from [dbo].[T_MAQUINA]
delete from [dbo].[T_MAQUINA_GRUPO_MAQUINA]
delete from [dbo].[T_ITENS_CALENDARIO]
delete from [dbo].[T_CALENDARIO]

delete from [dbo].[T_CLIENTES]
delete from [dbo].[T_CLP_MEDICOES]
delete from [dbo].[T_CLP_MEDICOES_H]
delete from [dbo].[T_COLABORADOR]
delete from [dbo].[T_ESTRUTURA_PRODUTO]
delete from [dbo].[T_FILA_PRODUCAO]
delete from [dbo].[T_GRUPO_MAQUINA]
delete from [dbo].[T_GRUPO_RECURSO]
delete from [dbo].[T_MOVIMENTOS_ESTOQUE]
------[dbo].[T_Negocio]
delete from [dbo].[T_PRODUTOS]
delete from [dbo].[T_RECURSOS]
delete from [dbo].[T_ROTEIROS]
delete from [dbo].[T_SIMULADOR_MAQUINA]
delete from [dbo].[T_TARGET_PRODUTO]
delete from [dbo].[T_TIPO_MOV_ESTOQUE]
DELETE FROM T_CLP_MEDICOES 






DELETE FROM T_ITENS_CALENDARIO
DELETE FROM  T_CALENDARIO

DELETE FROM T_MEDICOES
DELETE FROM T_MAQUINA_T_GRUPO_MAQUINA
DELETE FROM T_TARGET_PRODUTO

DELETE FROM T_FILA_PRODUCAO 
DELETE FROM T_GRUPO_MAQUINA
DELETE FROM T_MAQUINA
DELETE FROM T_TURNO 
DELETE FROM T_TURMA 
DELETE FROM T_OCORRENCIAS 
DELETE FROM T_TIPO_OCORRENCIA 

DELETE FROM T_ORDEM_PRODUCAO 
DELETE FROM T_PRODUTO 
DELETE FROM T_MAQUINA 

GO

INSERT [dbo].[T_MAQUINA] ([MAQ_ID], [MAQ_DESCRICAO], [CAL_ID]) VALUES (N'MQ0005', N'Maquina 5', 1);
INSERT [dbo].[T_MAQUINA] ([MAQ_ID], [MAQ_DESCRICAO], [CAL_ID]) VALUES (N'MQ001', N'MAQUINA 1', 1)
INSERT [dbo].[T_MAQUINA] ([MAQ_ID], [MAQ_DESCRICAO], [CAL_ID]) VALUES (N'MQ002', N'MAQUINA 2', 2)
INSERT [dbo].[T_PRODUTO] ([PRO_ID], [PRO_DESCRICAO], [PRO_ESTOQUE_ATUAL], [UNI_ID]) VALUES (N'CH001', N'CHAPA PALELÃO ONDULADA', 100, N'KG')
INSERT [dbo].[T_PRODUTO] ([PRO_ID], [PRO_DESCRICAO], [PRO_ESTOQUE_ATUAL], [UNI_ID]) VALUES (N'CH002', N'CHAPA PAPELÃO PARDO', 100, N'KG')
INSERT [dbo].[T_PRODUTO] ([PRO_ID], [PRO_DESCRICAO], [PRO_ESTOQUE_ATUAL], [UNI_ID]) VALUES (N'CX001', N'CAIXA DE CELULAR', 100, N'KG')
INSERT [dbo].[T_PRODUTO] ([PRO_ID], [PRO_DESCRICAO], [PRO_ESTOQUE_ATUAL], [UNI_ID]) VALUES (N'CX002', N'CAIXA DE GELADEIRA', 100, N'KG')
INSERT [dbo].[T_ORDEM_PRODUCAO] ([ORD_ID], [ORD_QUANTIDADE_PREVISTA], [PRO_ID], [ORD_DATA_ENTREGA_DE], [ORD_DATA_ENTREGA_ATE]) VALUES (N'OP001', 100, N'CX001', CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[T_ORDEM_PRODUCAO] ([ORD_ID], [ORD_QUANTIDADE_PREVISTA], [PRO_ID], [ORD_DATA_ENTREGA_DE], [ORD_DATA_ENTREGA_ATE]) VALUES (N'OP002', 100, N'CX002', CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[T_ORDEM_PRODUCAO] ([ORD_ID], [ORD_QUANTIDADE_PREVISTA], [PRO_ID], [ORD_DATA_ENTREGA_DE], [ORD_DATA_ENTREGA_ATE]) VALUES (N'OP003', 100, N'CH001', CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime))
INSERT [dbo].[T_ORDEM_PRODUCAO] ([ORD_ID], [ORD_QUANTIDADE_PREVISTA], [PRO_ID], [ORD_DATA_ENTREGA_DE], [ORD_DATA_ENTREGA_ATE]) VALUES (N'OP004', 100, N'CH002', CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime))
SET IDENTITY_INSERT [dbo].[T_FILA_PRODUCAO] ON 

INSERT [dbo].[T_FILA_PRODUCAO] ([FPR_ID], [ORD_ID], [MAQ_ID], [FPR_DATA _INICIO_PREVISTA], [FPR_DATA_FIM_PREVISTA], [FPR_DATA_FIM_MAXIMA], [FPR_QUANTIDADE]) VALUES (1, N'OP001', N'MQ001', CAST(N'2018-03-01T09:00:00.000' AS DateTime), CAST(N'2018-03-01T10:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime), 7200)
INSERT [dbo].[T_FILA_PRODUCAO] ([FPR_ID], [ORD_ID], [MAQ_ID], [FPR_DATA _INICIO_PREVISTA], [FPR_DATA_FIM_PREVISTA], [FPR_DATA_FIM_MAXIMA], [FPR_QUANTIDADE]) VALUES (2, N'OP002', N'MQ001', CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime), 0)
INSERT [dbo].[T_FILA_PRODUCAO] ([FPR_ID], [ORD_ID], [MAQ_ID], [FPR_DATA _INICIO_PREVISTA], [FPR_DATA_FIM_PREVISTA], [FPR_DATA_FIM_MAXIMA], [FPR_QUANTIDADE]) VALUES (3, N'OP002', N'MQ002', CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime), CAST(N'1900-01-01T00:00:00.000' AS DateTime), 0)
SET IDENTITY_INSERT [dbo].[T_FILA_PRODUCAO] OFF
INSERT [dbo].[T_TIPO_OCORRENCIA] ([TIP_ID], [TIP_DESCRICAO]) VALUES (1, N'PARADAS NÃO PROGRAMADAS')
INSERT [dbo].[T_TIPO_OCORRENCIA] ([TIP_ID], [TIP_DESCRICAO]) VALUES (2, N'PARADA PROGRAMADA')
INSERT [dbo].[T_TIPO_OCORRENCIA] ([TIP_ID], [TIP_DESCRICAO]) VALUES (3, N'BAIXA PERFORMACE')
INSERT [dbo].[T_TIPO_OCORRENCIA] ([TIP_ID], [TIP_DESCRICAO]) VALUES (4, N'ALTA PERFORMACE')
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'1.1', N'SETUP', 1)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'1.2', N'SETUP/REGULAGEM', 1)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'1.3', N'QUEBRA DE MÁQUINA', 1)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'1.4', N'FALHA OPERACIONAL', 1)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'1.5 ', N'DEFEITO DE MATÉRIA PRIMA', 1)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'1.6', N'FALHA DE PLANEJAMENTO', 1)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'2.1', N'FALTA DE PEDIDO', 2)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'2.2', N'TREINAMENTO', 2)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'2.3', N'MANUTENÇÃO PREVENTIVA', 2)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'2.4', N'GINASTICA LABORAL', 2)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'2.5', N'FERIADO NÃO REGISTRADO NO CALENDÁRIO', 2)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'2.6', N'SEM EXPEDIENTE', 2)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'3.1', N'QUADRO REDUZIDO', 3)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'3.2', N'BAIXA QUALIDADE DE MATÉRIA PRIMA', 3)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'3.3', N'OUTROS', 3)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'4.1', N'QUADRO AUMENTADO', 4)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'4.2', N'BOA QUALIDADE DE MATÉRIA PRIMA', 4)
INSERT [dbo].[T_OCORRENCIAS] ([OCO_ID], [OCO_DESCRICAO], [TIP_ID]) VALUES (N'4.3', N'OUTROS', 4)
INSERT [dbo].[T_TURMA] ([TURM_ID], [TURM_DESCRICAO]) VALUES (N'A', N'TURMA A')
INSERT [dbo].[T_TURMA] ([TURM_ID], [TURM_DESCRICAO]) VALUES (N'B', N'TURMA B')
INSERT [dbo].[T_TURMA] ([TURM_ID], [TURM_DESCRICAO]) VALUES (N'C', N'TURMA C')
INSERT [dbo].[T_TURMA] ([TURM_ID], [TURM_DESCRICAO]) VALUES (N'D', N'TURMA D')
INSERT [dbo].[T_TURNO] ([TURN_ID], [TURN_DESCRICAO]) VALUES (N'A', N'TURNO A')
INSERT [dbo].[T_TURNO] ([TURN_ID], [TURN_DESCRICAO]) VALUES (N'B', N'TURNO B')
INSERT [dbo].[T_TURNO] ([TURN_ID], [TURN_DESCRICAO]) VALUES (N'C', N'TURNO C')
INSERT [dbo].[T_TURNO] ([TURN_ID], [TURN_DESCRICAO]) VALUES (N'D', N'TURNO D')

/*DELETE FROM T_MAQUINA
INSERT INTO [dbo].[T_MAQUINA] ([MAQ_ID],[MAQ_DESCRICAO],[CAL_ID])
     VALUES ('M01','MAQUINA 1',1),('M02','MAQUINA 2',2)
GO
*/

--CRIA CALENDARIOO 1 DE UM TURNO 2 COM 2 TURNOS E 3 COM 3 TURNOS
DELETE FROM T_CALENDARIO 
insert into T_CALENDARIO (CAL_ID,CAL_DESCRICAO) 
values	(1,'CALENDARIO 1 TURNO'),(2,'CALENDARIO 2 TURNOS'),(3,'CALENDARIO 3 TURNOS')
DELETE FROM T_ITENS_CALENDARIO
DECLARE @X int
set @X= 1
DECLARE @DIA int
set @DIA= 0
WHILE @DIA < 1000
BEGIN
  -- CAL 1 TURNO
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(1,@X,'2018-01-01 08:00:00.000','2018-01-01 18:00:00.000','A','A','1')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(1,@X,'2018-01-01 18:00:00.000','2018-01-02 08:00:00.000',null, null,'2')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1

	-- CAL 2 TURNOS
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(2,@X,'2017-12-31 22:00:00.000','2018-01-01 05:59:59.000','A','A','1')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(2,@X,'2018-01-01 06:00:00.000','2018-01-01 13:59:59.000','B','B','1')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(2,@X,'2018-01-01 14:00:00.000','2018-01-01 21:59:59.999',null, null,'2')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1


	-- CAL 3 TURNOS
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(3,@X,'2017-12-31 22:00:00.000','2018-01-01 05:59:59.999','A','A','1')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(3,@X,'2018-01-01 06:00:00.000','2018-01-01 13:59:59.999','B','B','1')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1
	insert into T_ITENS_CALENDARIO (CAL_ID,ICA_ID,ICA_DATA_DE,ICA_DATA_ATE,URM_ID,URN_ID,ICA_TIPO) 
	values	(3,@X,'2018-01-01 14:00:00.000','2018-01-01 21:59:59.999','C','C','1')
	UPDATE T_ITENS_CALENDARIO SET 
		ICA_DATA_DE = dateadd(day,@DIA,ICA_DATA_DE),
		ICA_DATA_ATE = dateadd(day,@DIA,ICA_DATA_ATE)
	WHERE ICA_ID = @X
	SET @X = @X+1
	SET @DIA = @DIA+1

END


GO 




delete from T_CLP_MEDICOES

GO

DROP VIEW [dbo].[V_CLP_MEDICOES]
GO

CREATE VIEW [dbo].[V_CLP_MEDICOES]
AS SELECT MAQUINA_ID, MIN(DATA_INI) AS DATA_INI, MAX(DATA_FIM) AS DATA_FIM, SUM(QTD) AS QTD, GRUPO, STATUS, URN_ID, URM_ID 
,FEE_ID, FEE_OBSERVACOES, OCO_ID, ORD_ID
FROM T_CLP_MEDICOES CLM
LEFT JOIN T_FEEDBACK FEE ON FEE.MAQ_ID = CLM.MAQUINA_ID AND FEE.FEE_GRUPO = CLM.GRUPO
GROUP BY MAQUINA_ID, GRUPO, STATUS, URN_ID, URM_ID ,FEE_ID, FEE_OBSERVACOES, OCO_ID, ORD_ID
GO


drop  TRIGGER [dbo].[TGR_CLP_MEDICOES_01]
GO

CREATE TRIGGER [dbo].[TGR_CLP_MEDICOES_01] 
ON [dbo].[t_clp_medicoes] 
FOR INSERT 
AS 
  BEGIN 
      DECLARE @ID         INT, 
              @U_ID       INT, 
              @MAQUINA_ID VARCHAR(10), 
              @DATA       DATETIME, 
              @QTD        INT, 
              @U_QTD      INT, 
              @GRUPO      INT, 
              @U_GRUPO    INT, 
              @STATUS     INT, 
              @URN_ID     VARCHAR(1), 
              @U_URN_ID   VARCHAR(1), 
              @URM_ID     VARCHAR(1), 
              @U_URM_ID   VARCHAR(1) 

      SELECT @ID = id, 
             @MAQUINA_ID = maquina_id, 
             @DATA = data_fim, 
             @QTD = qtd, 
             @GRUPO = grupo, 
             @STATUS = status, 
             @URN_ID = urn_id, 
             @URM_ID = urm_id 
      FROM   inserted 

      -- Agrupar na sequencia de data e hora quando a informação for zero   ou diferente de zero    
      SELECT TOP 1 @U_URN_ID = urn_id, 
                   @U_URM_ID = urm_id, 
                   @U_ID = id, 
                   @U_QTD = qtd, 
                   @U_GRUPO = grupo 
      FROM   t_clp_medicoes (nolock) 
      WHERE  id <> @ID 
             AND maquina_id = @MAQUINA_ID 
      ORDER  BY id DESC 

      SELECT @URN_ID = urn_id, 
             @URM_ID = urm_id 
      FROM   t_itens_calendario I(nolock) 
             INNER JOIN t_maquina M 
                     ON M.cal_id = I.cal_id 
      WHERE  @DATA BETWEEN ica_data_de AND ica_data_ate 
             AND M.maq_id = @MAQUINA_ID 

      PRINT '--' 

      PRINT @DATA 

      PRINT @URN_ID 

      IF @U_QTD = 0 
         AND @QTD = 0 
        SET @GRUPO = @U_GRUPO 

      IF @U_QTD <> 0 
         AND @QTD <> 0 
        SET @GRUPO = @U_GRUPO 

      IF ( @U_QTD = 0 
           AND @QTD <> 0 ) 
          OR ( @U_QTD <> 0 
               AND @QTD = 0 ) 
        SET @GRUPO = @U_GRUPO + 1 

      -- VAI PULAR UM ID CASO O TURNO TENHO MUDADO E CONENCIDENTEMENTE TENHO MUDADO QUANTIDADE  
      IF @U_URN_ID <> @URN_ID 
          OR @U_URM_ID <> @URM_ID 
        SET @GRUPO = @U_GRUPO + 1 

      UPDATE t_clp_medicoes 
      SET    grupo = Isnull(@GRUPO, 1), 
             urn_id = @URN_ID, 
             urm_id = @URM_ID 
      WHERE  id = @ID 
  /*      - OK Agrupar na sequencia de data e hora quando a informação for zero   ou diferente de zero      - OK Quebrar grupo quando o mesmo estiver entre turnos       - OK Gravar turno e turma baseado no calendario             - Tratar linhas com variação entre zero e quantidade com intervalos muito curtos               - opção 1  parametrizar tempo minimo   exemplo so considera maquina parada se depois de 1 minuto sem quantidade so considera produzindo depois de 1 minuto com quantidade       - dia da turma    quando comesa e termina o dia da turma  */
  END 

GO




-- tabela para teste
 
drop table T_SIMULADOR_MAQUINA
CREATE TABLE [dbo].[T_SIMULADOR_MAQUINA](
 [ID] [int] IDENTITY(1,1) NOT NULL,
 [MAQ_ID] [VARCHAR] (50) NULL,
 [BATIDAS_POR_SEGUNDO] [INT] NOT NULL,
 [QTD_PECAS_POR_BATIDA] [INT] NULL,
 [TEMPO_ESPACO] [INT] NULL,
 [INTERVALO_CLP] [INT] NULL,

  CONSTRAINT [Key30] PRIMARY KEY CLUSTERED 
(
 [ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO 
INSERT INTO T_SIMULADOR_MAQUINA (MAQ_ID,BATIDAS_POR_SEGUNDO,QTD_PECAS_POR_BATIDA,TEMPO_ESPACO,INTERVALO_CLP)
VALUES ('MQ001',2,0,900,5),('MQ002',2,0,900,5) -- DUAS MAQUINAS SO DEPOIS QUE DESENVOLVER O AGRUPADOR ,('M02',2,1,990)
/*PARA TESTES COM GATILHO 
INSERT INTO T_CLP_MEDICOES VALUES 
					((SELECT ISNULL(MAX(ID), 0)+1 FROM T_CLP_MEDICOES)
					,'M012'
					,DATEADD(SECOND,5,(SELECT ISNULL(MAX(DATA), GETDATE()) FROM T_CLP_MEDICOES))
					,0,'',0,'','')
SELECT TOP 1 * FROM T_CLP_MEDICOES (NOLOCK) ORDER BY 1 DESC 
*/


/* PARA ACOMPANHAMENTO E MUDANÇA DE VARIAVEIS 
SELECT TOP 1 * FROM T_CLP_MEDICOES (NOLOCK) ORDER BY 1 DESC 
UPDATE T_SIMULADOR_MAQUINA SET 
BATIDAS_POR_SEGUNDO = 2, 
QTD_PECAS_POR_BATIDA= 2,
TEMPO_ESPACO= 1 -- EM MILISEGUNDOS QUANTO MENOR MAIS RAPIDO IRA CRIAR OS REGISTROS 
-- VALOR MINIMO ZERO   VALOR MAXIMO 997    EM TESE COM 997  SERA CRIADO UM REGISTRO A CADAS SEGUNDOS 
-- COM VALOR ZERRO   MIL REGISTROS A CADA SEGUNDO LIMITADOS AO PROCESSADOR DA MIQUINA 
WHERE MAQ_ID= 'M01'
*/

-- Simulador considerando parametros de 
-- T_SIMULADOR_MAQUINA.MAQ_ID
-- T_SIMULADOR_MAQUINA.BATIDAS_POR_SEGUNDO
-- T_SIMULADOR_MAQUINA.QTD_PECAS_POR_BATIDA
GO 


DECLARE @GRUPO INT, @GRUPO_CONTROLE INT, @CONTROLE INT, @QTD_PECAS_POR_BATIDA int, @BATIDAS_POR_SEGUNDO int;
DECLARE @CONTADOR INT,@SEGUNDO int, @MILISEGUNDO INT, @ID INT,@TEMPO_ESPACO INT,@INTERVALO_CLP INT ,@MAQ_ID VARCHAR(50);
SET @GRUPO = -1;
SET @GRUPO_CONTROLE = -1;
SET @CONTROLE= DATEPART(HOUR, (SELECT ISNULL(MAX(DATA), GETDATE()) FROM T_CLP_MEDICOES)) % 2;
set @CONTADOR = 0 
set @SEGUNDO = 0 
set @TEMPO_ESPACO= 500
 
WHILE @CONTADOR < 18000
BEGIN
	print DATEPART(MILLISECOND, GETDATE())
	IF @TEMPO_ESPACO > 997  -- QUANDO É MAIOR TRAVA NÃO DA TEMPO DE GERAR 
	BEGIN
		SELECT @TEMPO_ESPACO = MAX(TEMPO_ESPACO) FROM T_SIMULADOR_MAQUINA(nolock)
	END
	
	--IF @SEGUNDO <> DATEPART(SECOND, GETDATE()) -- gera apenas um lote por segundo 
	
	IF DATEPART(MILLISECOND, GETDATE()) > @TEMPO_ESPACO OR @SEGUNDO <> DATEPART(SECOND, GETDATE()) 
	--@TEMPO_ESPACO > 998 -- gera na casa do mili segundo apenas quando o mesmo for maior que 800   ou seja somente gera registro quando o mili segundo for maior se colocarmos 999  em tese o sistema se comporta com um registro por segundo 
	BEGIN 
	set @SEGUNDO = DATEPART(SECOND, GETDATE())
	SET @CONTADOR = @CONTADOR+1
		DECLARE _Cursor CURSOR FOR
		select * from T_SIMULADOR_MAQUINA (nolock)
		OPEN _Cursor;
		FETCH NEXT FROM _Cursor into @ID,@MAQ_ID,@BATIDAS_POR_SEGUNDO,@QTD_PECAS_POR_BATIDA,@TEMPO_ESPACO,@INTERVALO_CLP;
		WHILE @@FETCH_STATUS = 0
		BEGIN
				IF (((@INTERVALO_CLP*@BATIDAS_POR_SEGUNDO)*@QTD_PECAS_POR_BATIDA) = 0  AND @GRUPO_CONTROLE = 0) OR @GRUPO_CONTROLE = -1
				BEGIN 
					SET @GRUPO_CONTROLE = 1
					SET @GRUPO = @GRUPO+1
				END
				IF (((@INTERVALO_CLP*@BATIDAS_POR_SEGUNDO)*@QTD_PECAS_POR_BATIDA) <> 0 AND @GRUPO_CONTROLE <> 0) OR @GRUPO_CONTROLE = -1 
				BEGIN
					SET @GRUPO_CONTROLE = 0 
					SET @GRUPO = @GRUPO+1
				END
				INSERT INTO T_CLP_MEDICOES VALUES 
					((SELECT ISNULL(MAX(ID), 0)+1 FROM T_CLP_MEDICOES)
					,@MAQ_ID
					,DATEADD(SECOND,@INTERVALO_CLP,(SELECT ISNULL(MAX(DATA), GETDATE()) FROM T_CLP_MEDICOES)) 
					, (@INTERVALO_CLP*@BATIDAS_POR_SEGUNDO)*@QTD_PECAS_POR_BATIDA
					, ''--@GRUPO
					, 0
					, ''
					, '')
			FETCH NEXT FROM _Cursor into @ID,@MAQ_ID,@BATIDAS_POR_SEGUNDO,@QTD_PECAS_POR_BATIDA,@TEMPO_ESPACO,@INTERVALO_CLP;
		END;	
		CLOSE _Cursor;
		DEALLOCATE _Cursor;
	End;
End;


/*

TESTA

SELECT TOP 1 * FROM T_CLP_MEDICOES (NOLOCK) WHERE MAQUINA_ID= 'MQ001' AND GRUPO <> 0  ORDER BY 1 DESC 
SELECT TOP 1 * FROM T_CLP_MEDICOES (NOLOCK) WHERE MAQUINA_ID= 'MQ002' AND GRUPO <> 0  ORDER BY 1 DESC 

UPDATE T_SIMULADOR_MAQUINA SET BATIDAS_POR_SEGUNDO = 2, QTD_PECAS_POR_BATIDA= 0,TEMPO_ESPACO= 10,INTERVALO_CLP=5 WHERE MAQ_ID= 'MQ001'
UPDATE T_SIMULADOR_MAQUINA SET BATIDAS_POR_SEGUNDO = 2, QTD_PECAS_POR_BATIDA=9 ,TEMPO_ESPACO= 0,INTERVALO_CLP=5 WHERE MAQ_ID= 'MQ002'
-- EM MILISEGUNDOS QUANTO MENOR MAIS RAPIDO IRA CRIAR OS REGISTROS 
-- VALOR MINIMO ZERO   VALOR MAXIMO 997    EM TESE COM 997  SERA CRIADO UM REGISTRO A CADAS SEGUNDOS 
-- COM VALOR ZERRO   MIL REGISTROS A CADA SEGUNDO LIMITADOS AO PROCESSADOR DA MIQUINA 


*/